{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","imagenes","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"oNAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SArBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,aA4B/BZ,EAAYe,UAAY,CACpBd,cAAee,IAAUC,KAAKC,Y,mCCrCrBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAWH,GAF9C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAM,CAGFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZvB,kBAgBZM,GAhBY,4CAAH,sDCEPO,EAAc,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIpC,OAFAc,QAAQC,IAAIN,EAAIC,EAAOV,GAGnB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCLHS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAErB,ECCwB,SAACA,GAEzB,MAA0BlB,mBAAS,CAC/ByB,KAAK,GACLe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAbAC,qBAAU,WAEN1B,EAASC,GACJ0B,MAAK,SAAAC,GACFH,EAAS,CACLjB,KAAKoB,EACLL,SAAS,SAGtB,CAACtB,IAIGuB,EDtB0BK,CAAa5B,GAAlC6B,EAAZ,EAAOtB,KAAee,EAAtB,EAAsBA,QAItB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDlB,IAElDsB,GAAW,mBAAGJ,UAAW,mCAAd,wBAEZ,qBAAKA,UAAU,YAAf,SAGQW,EAASpB,KAAI,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEjBxBmB,EAAe,WAGxB,MAAoChD,mBAAS,CAAC,iBAA9C,mBAAOiD,EAAP,KAAmBlD,EAAnB,KAaA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BAEQkD,EAAWtB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAYA,GADPA,Y,MC3B7BgC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.87bb66e7.chunk.js","sourcesContent":["//rafc tab...\r\nimport React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategorias}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //esto para que la pagina no se refresque cada vez que escribo algo\r\n\r\n        if (inputValue.trim().length > 2){\r\n            setCategorias(cats => [ inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange} //se dispara cada ve que la caja de texto cambie\r\n\r\n            />\r\n        </form>\r\n    )\r\n}\r\n//el inputValue siempre va a ser el ultimo valor que yo escribo en la pag\r\n\r\nAddCategory.prototype = {\r\n    setCategorias: PropTypes.func.isRequired\r\n} //para que los demas usen mi codigo...","export const getGifs = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI (category) }&limit=10&api_key=Sz6sun8FViGaY1dQgow5VIJ0BfEaEMKo`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n//el encodeURL saca los espacios\r\n    const gifs = data.map(img => {\r\n        return{\r\n            //retorno un nuevo objeto con la info que a mi me interesa\r\n            //en esta caso el id\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    console.log(id, title, url);\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n//animate.css de ahi saco todos los efectos para las imagenes","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n//el useEfect me va a permitir poder ejecutar cierto codigo de manera condicional\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:imagenes, loading} = useFetchGifs(category);\r\n\r\n//al data:iamgenes es como que le cambio el nombre de data por imagenes\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n            {loading && <p className =\"animate__animated animate__flash\">loading...</p>}\r\n\r\n            <div className=\"card-grid\">\r\n            \r\n                {\r\n                    imagenes.map(img => (\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            {...img }\r\n                        />\r\n                    ))\r\n                }\r\n        </div> \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n//Los custom Hooks son para extraer logica de algun componente\r\n//de manera que sea sencillo utilizarla nuevamente\r\n\r\n//el ? es si hace esto... y el : es caso contrario al ?","//TODOS LOS HOOKS EMPIEZAN CON use\r\n//no son mas que funciones\r\n\r\nimport {useState, useEffect} from 'react'\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    \r\n    useEffect(() => {\r\n        //aca voy a traer las imagenes\r\n        getGifs( category )\r\n            .then(imgs => {\r\n                setState({\r\n                    data:imgs,\r\n                    loading: false\r\n                }); \r\n        })\r\n    }, [category])\r\n//le mando un arreglo de dependencias ([]) y el codigo se va a ejecutar solo una vez\r\n//sin que se refresquen y carguen mas imagenes cada vez que apreto el boton\r\n\r\n    return state; //es la info que se encuentra en useState\r\n}\r\n//los customs hooks funcionan como si fueran funcional components\r\n","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n\r\n    const [categorias, setCategorias] = useState(['MortalKombat']);\r\n\r\n    //const handleAdd = () =>{\r\n\r\n     //   setCategorias([...categorias, 'MortalKombat']);\r\n\r\n        //setCategorias( cats => [...cats, 'MortalKombat']); de otra manera\r\n\r\n        //uso el setCategorias para cambiar las propiedades\r\n        //y el ...categorias para mantener las categorias anteriores\r\n        //y agregar una nueva\r\n    //}\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategorias={setCategorias}/>\r\n            <hr/>\r\n\r\n            \r\n\r\n            <ol>\r\n                { \r\n                    categorias.map(category =>\r\n                        <GifGrid \r\n                        key={category}\r\n                        category = {category}/>)\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n//el profe dej√≥ dos enlaces para leer sobre react(69)\r\n//el map me va a servir para tranformar cada uno de los elementos\r\n//que estan dentro de su arreglo","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}